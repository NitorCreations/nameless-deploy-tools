# Copyright 2016-2017 Nitor Creations Oy
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Terminate any old instance(s)
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 0
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        wait: yes
      register: ec2_prototype_instance

- name: "create instance"
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: "{{ bake_tags }}"
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 1
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        instance_profile_name: "{{ amibake_instanceprofile }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        volumes:
          - device_name: /dev/sda1
            device_type: gp3
            volume_size: "{{ volume_size }}"
            delete_on_termination: true
        wait: yes
      register: ec2_prototype_instance
    - set_fact:
        ec2_prototype_instance: "{{ ec2_prototype_instance }}"

- name: Add new instance to host group {{ job_name }}_ami_instance
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - add_host: hostname={{ item.public_ip }} groupname={{ job_name }}_ami_instance
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "no"

    - wait_for: host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started search_regex=OpenSSH
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "no"

    - add_host: hostname={{ item.private_ip }} groupname={{ job_name }}_ami_instance
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "yes"

    - wait_for: host={{ item.private_ip }} port=22 delay=60 timeout=320 state=started search_regex=OpenSSH
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "yes"

    - name: Pause for a bit to work around startup related SSH access denied error
      pause: "seconds={{ pause_seconds }}"

- name: Ensure python2 on ubuntu
  hosts: "{{ job_name }}_ami_instance"
  become: no
  gather_facts: no
  tasks:
    - name: 'install python2'
      raw: if egrep '^ID=ubuntu$' /etc/os-release > /dev/null; then sudo apt-get update -qq && sudo apt-get install -qq python2.7 && sudo ln -snf /usr/bin/python2.7 /usr/bin/python; else echo not ubuntu; fi

- name: Prepare AMI instance - run pre_install, install/update packages and finally post_install
  hosts: "{{ job_name }}_ami_instance"
  become: yes
  tasks:
    - script: "{{ prepare_script }}"
    - user:
        name: "{{ app_user }}"
        system: yes
        shell: /sbin/nologin
        home: "{{ app_home }}"
        createhome: yes
    - shell: bash -c 'sleep {{ timeout_min }}m ; shutdown -P +1' &
    - file:
        path: /opt/nameless
        state: directory
        mode: 0755
    - copy:
        src: "{{ imagedir }}/bake-credentials"
        dest: /opt/nameless/
        owner: root
        group: root
        mode: 0644
    - copy:
        src: "{{ imagedir }}/{{ item }}"
        dest: /opt/nameless/
        owner: root
        group: root
        mode: 0644
      with_items: "{{ files }}"
    - apt_repository: repo="{{ item }}"
      with_items: "{{ repos }}"
      when: ansible_os_family == "Debian"
    - apt: update_cache=yes upgrade=dist
      when: ansible_os_family == "Debian"
    - apt:
        name: ["python-pip", "git", "build-essential", "gcc", "libpython2.7-dev", "libffi-dev", "libssl-dev", "jq", "nvme-cli", "checkpolicy", "semodule-utils"]
      when: ansible_os_family == "Debian"
    - yum:
        name: epel-release
      when: ansible_os_family == "RedHat" or ansible_os_family == "Rocky"
    - yum:
        name: '*'
        state: latest
      when: ansible_os_family == "RedHat" or ansible_os_family == "Rocky"
    - yum:
        name: ["python-pip", "wget", "rxvt-unicode", "lsof", "psmisc", "cryptsetup", "git", "gcc", "unzip", "python-crypto", "python-devel", "libffi-devel", "openssl-devel", "jq", "nvme-cli"]
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"
    - dnf:
        name: ["python39-pip", "wget", "rxvt-unicode", "lsof", "psmisc", "cryptsetup", "git", "gcc", "unzip", "python39-devel", "libffi-devel", "openssl-devel", "jq", "nvme-cli"]
      when: (ansible_os_family == "RedHat" or ansible_os_family == "Rocky") and ansible_distribution_major_version == "8"
    - alternatives:
        name: python
        path: /usr/bin/python3.9
      when: (ansible_os_family == "RedHat" or ansible_os_family == "Rocky") and ansible_distribution_major_version == "8"
    - alternatives:
        name: python3
        path: /usr/bin/python3.9
      when: (ansible_os_family == "RedHat" or ansible_os_family == "Rocky") and ansible_distribution_major_version == "8"
    - alternatives:
        name: pip
        link: /usr/bin/pip
        path: /usr/bin/pip3.9
      when: (ansible_os_family == "RedHat" or ansible_os_family == "Rocky") and ansible_distribution_major_version == "8"
    - alternatives:
        name: pip3
        link: /usr/bin/pip3
        path: /usr/bin/pip3.9
      when: (ansible_os_family == "RedHat" or ansible_os_family == "Rocky") and ansible_distribution_major_version == "8"
    - script: install_tools.sh {{ tools_version }}
    - script: "{{ imagedir }}/pre_install.sh"
    - apt_key: url="{{ item }}" state=present
      with_items: "{{ keys }}"
      when: ansible_os_family == "Debian"
    - apt:
        name: "{{ packages }}"
      when: ansible_os_family == "Debian"
    - yum:
        name: "{{ packages }}"
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"
    - dnf:
        name: "{{ packages }}"
      when: ansible_os_family == "RedHat" or ansible_os_family == "Rocky" and ansible_distribution_major_version == "8"
    - script: "{{ imagedir }}/post_install.sh"

- name: Create AMI from deployed instance
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - debug: var=ec2_prototype_instance

    - name: "Create AMI from deployed server {{ ec2_prototype_instance.tagged_instances[0].id }}"
      ec2_ami:
        instance_id: "{{ ec2_prototype_instance.tagged_instances[0].id }}"
        wait: yes
        name: "{{ job_name }}_{{ build_number }}"
        region: "{{ aws_region }}"
      register: base_ami

    - set_fact:
        ami_id_to_deploy: "{{ base_ami.image_id }}"

    - name: Tag AMI
      ec2_tag: resource={{ base_ami.image_id }} region={{ aws_region }}
      args:
        tags:
          Name: "{{ job_name }}_{{ build_number }}"
          Tstamp: "{{ tstamp }}"

- name: Terminate instance(s) used for creating AMI
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 0
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        wait: no
      register: ec2_prototype_instance

- name: Clean up old AMIs, keep the latest 5 excluding images with running instances or launch configurations
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          instance-state-name: [running, pending]
      register: running_instances

    - ec2_lc_info:
        region: "{{ aws_region }}"
        sort: created_time
        sort_order: descending
      register: launch_configurations

    - set_fact: running_image_ids="{{ running_instances.instances | map(attribute='image_id') | unique | list }}"
    - set_fact: lc_image_ids="{{ launch_configurations.launch_configurations | map(attribute='image_id') | unique | list }}"
    - set_fact: images_in_use="{{ running_image_ids + lc_image_ids | unique | list }}"

    - ec2_ami_info:
        region: "{{ aws_region }}"
        owners: self
        filters:
          name: "{{ job_name }}_??????????????"
      register: old_ami_result

    - ec2_ami_info:
        region: "{{ aws_region }}"
        image_ids: "{{ old_ami_result.images | map(attribute='image_id') | difference(images_in_use) | list }}"
      register: non_running_images

    - set_fact: non_running_images_sorted="{{ non_running_images.images | sort(attribute='creation_date', reverse=True) }}"

    - set_fact: after_fifth="{{ non_running_images_sorted[5:] }}"

    - debug:
        msg: "Images: {{ old_ami_result.images | map(attribute='name') | list | to_yaml }}"

    - debug:
        msg: "To delete: {{ after_fifth | map(attribute='name') | list | to_yaml }}"

    - ec2_ami:
        region: "{{ aws_region }}"
        image_id: "{{ item.image_id }}"
        delete_snapshot: yes
        state: absent
      with_items: "{{ after_fifth }}"
      ignore_errors: yes

- name: Write new AMI id to file {{ ami_id_file }}
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action: copy content={{ base_ami.image_id }} dest={{ ami_id_file }}
