# Copyright 2016-2023 Nitor Creations Oy
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://setuptools.pypa.io/en/latest/userguide/dependency_management.html

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nameless-deploy-tools"
requires-python = ">=3.7"
description = "Tools for deploying to AWS via CloudFormation and Serverless framework that support a pull request based workflow"
license = { text = "Apache 2.0" }
authors = [{ name = "Pasi Niemi", email = "pasi@nitor.com" }]
version = "1.300"
dynamic = ["entry-points"]
dependencies = [
    "argcomplete",
    "boto3",
    "cloudformation-utils==0.0.2",
    "configparser",
    "ec2-utils>=0.38",
    "ipaddr",
    "jmespath",
    "nitor-vault>=0.41",
    "pyaml",
    "pycryptodomex",
    "Pygments",
    "pyOpenSSL>=19.1.0",
    "pyotp",
    "pyqrcode",
    "python-dateutil",
    "PyYAML>=5.2",
    "requests",
    "scandir",
    "six",
    "termcolor",
    "pypiwin32;platform_system=='Windows'",
    "win-unicode-console;platform_system=='Windows'",
    "wmi;platform_system=='Windows'",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "http://github.com/NitorCreations/nameless-deploy-tools"
Download = "https://github.com/NitorCreations/nameless-deploy-tools/tarball/1.300"

[project.scripts]
associate-eip = "n_utils.cli:associate_eip"
cf-logs-to-cloudwatch = "ec2_utils.cli:log_to_cloudwatch"
cf-update-stack = "n_utils.cli:update_stack"
ec2-associate-eip = "n_utils.cli:associate_eip"
logs-to-cloudwatch = "ec2_utils.cli:log_to_cloudwatch"
n-include-all = "n_utils.cli:resolve_all_includes"
n-include = "n_utils.cli:resolve_include"
nameless-dt-enable-profile = "n_utils.profile_util:cli_enable_profile"
nameless-dt-load-project-env = "n_utils.project_util:load_project_env"
nameless-dt-register-complete = "n_utils.project_util:ndt_register_complete"
ndt = "n_utils.ndt:ndt"
signal-cf-status = "ec2_utils.cli:cf_signal_status"

[project.optional-dependencies]
testing = ["coverage", "mock", "pytest-cov", "pytest-mock", "pytest"]
dev = ["black", "flake8", "isort", "pip-tools", "pyupgrade", "ruff"]

[tool.setuptools]
packages = ["n_utils"]
zip-safe = false
include-package-data = true
script-files = [
    "bin/create-shell-archive.sh",
    "bin/ensure-letsencrypt-certs.sh",
    "bin/lastpass-fetch-notes.sh",
    "bin/lpssh",
    "bin/encrypt-and-mount.sh",
    "bin/mount-and-format.sh",
    "bin/setup-fetch-secrets.sh",
    "bin/ssh-hostkeys-collect.sh",
]

[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
addopts = "--cov-config=.coveragerc --cov=n_utils/ --capture=sys"

[tool.black]
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 120
target-version = ['py37']
include = '\.pyi?$'
extend-exclude = 'venv'

[tool.isort]
# https://pycqa.github.io/isort/docs/configuration/options.html
# profile = "black"
# manually specifying black compatibility to override line length
multi_line_output = 3
combine_as_imports = true
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
py_version = 37
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
extend_skip = ['.idea', '.vscode', 'venv']

[tool.ruff]
# https://github.com/charliermarsh/ruff#configuration
target-version = "py37"
line-length = 120
select = ["E", "F", "W", "I", "N", "UP"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
